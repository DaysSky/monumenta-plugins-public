package com.playmonumenta.plugins.bosses.bosses.exalted;

import com.playmonumenta.plugins.bosses.BossBarManager;
import com.playmonumenta.plugins.bosses.BossBarManager.BossHealthAction;
import com.playmonumenta.plugins.bosses.SpellManager;
import com.playmonumenta.plugins.bosses.bosses.SerializedLocationBossAbilityGroup;
import com.playmonumenta.plugins.bosses.spells.Spell;
import com.playmonumenta.plugins.bosses.spells.SpellAxtalMeleeMinions;
import com.playmonumenta.plugins.bosses.spells.SpellBaseLaser;
import com.playmonumenta.plugins.bosses.spells.SpellBlockBreak;
import com.playmonumenta.plugins.bosses.spells.SpellShieldStun;
import com.playmonumenta.plugins.bosses.spells.SpellTpBehindPlayer;
import com.playmonumenta.plugins.bosses.spells.exalted.SpellAxtalGroundSurge;
import com.playmonumenta.plugins.bosses.spells.exalted.SpellAxtalTotem;
import com.playmonumenta.plugins.bosses.spells.exalted.SpellConditionalTpBehindPlayer;
import com.playmonumenta.plugins.effects.PercentDamageReceived;
import com.playmonumenta.plugins.effects.PercentSpeed;
import com.playmonumenta.plugins.events.DamageEvent;
import com.playmonumenta.plugins.particle.PartialParticle;
import com.playmonumenta.plugins.utils.BlockUtils;
import com.playmonumenta.plugins.utils.BossUtils;
import com.playmonumenta.plugins.utils.DamageUtils;
import com.playmonumenta.plugins.utils.EntityUtils;
import com.playmonumenta.plugins.utils.FastUtils;
import com.playmonumenta.plugins.utils.LocationUtils;
import com.playmonumenta.plugins.utils.MessagingUtils;
import com.playmonumenta.plugins.utils.MovementUtils;
import com.playmonumenta.plugins.utils.PlayerUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import net.kyori.adventure.bossbar.BossBar;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;
import net.kyori.adventure.text.format.TextColor;
import net.kyori.adventure.text.format.TextDecoration;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.Particle;
import org.bukkit.Sound;
import org.bukkit.SoundCategory;
import org.bukkit.World;
import org.bukkit.attribute.Attribute;
import org.bukkit.block.Block;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.entity.EntityDeathEvent;
import org.bukkit.plugin.Plugin;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.scheduler.BukkitRunnable;
import org.jetbrains.annotations.Nullable;

import static com.playmonumenta.plugins.Constants.TICKS_PER_SECOND;

public final class ExaltedCAxtal extends SerializedLocationBossAbilityGroup {
	public static final String identityTag = "boss_ex_caxtal";
	public static final int detectionRange = 110;

	private static final TextColor JADE_COLOR = TextColor.fromCSSHexString("#39b14e");

	private double mCoefficient = 1.0;

	public ExaltedCAxtal(final Plugin plugin, final LivingEntity boss, final Location spawnLoc, final Location endLoc) {
		super(plugin, identityTag, boss, spawnLoc, endLoc);
		mBoss.setRemoveWhenFarAway(false);
		mBoss.addScoreboardTag("Boss");

		final SpellBaseLaser corruptionBlast = new SpellBaseLaser(mPlugin, mBoss, 60,
			TICKS_PER_SECOND * 7, false, true, TICKS_PER_SECOND * 8,
			// Tick action per player
			(final LivingEntity target, final int ticks, final boolean blocked) -> {
				final World world = mBoss.getWorld();
				if (ticks % 8 == 0) {
					world.playSound(target.getLocation(), Sound.UI_TOAST_IN, SoundCategory.HOSTILE, 2, 0.5f + (ticks / 100f) * 1.5f);
				} else if (ticks % 8 == 2) {
					world.playSound(mBoss.getLocation(), Sound.UI_TOAST_IN, SoundCategory.HOSTILE, 2, 0.5f + (ticks / 100f) * 1.5f);
				} else if (ticks % 8 == 4) {
					world.playSound(target.getLocation(), Sound.ENTITY_WITHER_SPAWN, SoundCategory.HOSTILE, 2, 0.5f + (ticks / 100f) * 1.5f);
				} else if (ticks % 8 == 6) {
					world.playSound(mBoss.getLocation(), Sound.UI_TOAST_IN, SoundCategory.HOSTILE, 2, 0.5f + (ticks / 100f) * 1.5f);
				}
			},
			// Particles generated by the laser
			(final Location loc) -> {
				new PartialParticle(Particle.SMOKE_NORMAL, loc).count(1).delta(0.02).extra(0).spawnAsEntityActive(mBoss);
				new PartialParticle(Particle.SMOKE_LARGE, loc).count(1).delta(0.02).extra(0).spawnAsEntityActive(mBoss);
				new PartialParticle(Particle.SPELL_MOB, loc).count(1).delta(0.02).extra(1).spawnAsEntityActive(mBoss);
			},
			// TNT generated at the end of the attack
			(final LivingEntity player, final Location loc, final boolean blocked) -> {
				final double r = 15;
				final int maxDmg = 160;
				for (final Player p : PlayerUtils.playersInRange(loc, r, true)) {
					if (p.getLocation().distance(loc) <= r && (LocationUtils.hasLineOfSight(p.getLocation(), loc)
						|| LocationUtils.hasLineOfSight(p.getEyeLocation(), loc))) {
						final double dist = p.getLocation().distance(loc);
						DamageUtils.damage(mBoss, p, DamageEvent.DamageType.MAGIC, maxDmg * Math.max(0, 1 - dist / r),
							null, false, true, "Corruption Blast");
						com.playmonumenta.plugins.Plugin.getInstance().mEffectManager.addEffect(p, "CorruptionBlast",
							new PercentDamageReceived(2, -1.0));
					}
				}
				loc.getWorld().createExplosion(loc, 7, false, true, mBoss);
			});

		final SpellManager activeSpells1 = new SpellManager(Arrays.asList(
			corruptionBlast,
			new SpellAxtalGroundSurge(mPlugin, mBoss, 1, detectionRange),
			new SpellAxtalMeleeMinions(mPlugin, mBoss, 6, 3, 3, 20, 12, "~ExAxtalSummons", true),
			new SpellAxtalTotem(mPlugin, mBoss, 30)
		));

		final SpellManager activeSpells2 = new SpellManager(Arrays.asList(
			corruptionBlast,
			new SpellAxtalGroundSurge(mPlugin, mBoss, 2, detectionRange),
			new SpellAxtalMeleeMinions(mPlugin, mBoss, 8, 3, 3, 20, 12, "~ExAxtalSummons", true),
			new SpellAxtalTotem(mPlugin, mBoss, 35)
		));

		final SpellManager activeSpells3 = new SpellManager(Arrays.asList(
			corruptionBlast,
			new SpellAxtalGroundSurge(mPlugin, mBoss, 3, detectionRange),
			new SpellAxtalMeleeMinions(mPlugin, mBoss, 10, 3, 3, 20, 12, "~ExAxtalSummons", true),
			new SpellAxtalTotem(mPlugin, mBoss, 40)
		));

		final List<Spell> passiveSpells = Arrays.asList(
			new SpellBlockBreak(mBoss),
			new SpellShieldStun(TICKS_PER_SECOND * 6),
			// Teleport the boss to targetted player if he is stuck in bedrock
			new SpellConditionalTpBehindPlayer(mPlugin, mBoss,
					b -> b.getLocation().getBlock().getType() == Material.BEDROCK ||
					     b.getLocation().add(0, 1, 0).getBlock().getType() == Material.BEDROCK ||
					     b.getLocation().getBlock().getType() == Material.LAVA)
		);

		final SpellManager phaseChangeActive = new SpellManager(Collections.singletonList(
			new SpellTpBehindPlayer(mPlugin, mBoss, TICKS_PER_SECOND * 4 + 1, detectionRange, 50, 10, true)
		));

		final Map<Integer, BossHealthAction> events = new HashMap<>();
		events.put(100, mBoss -> PlayerUtils.nearbyPlayersAudience(mSpawnLoc, detectionRange)
			.sendMessage(Component.text("At l", NamedTextColor.DARK_RED)
				.append(Component.text("a", NamedTextColor.DARK_RED, TextDecoration.OBFUSCATED))
				.append(Component.text("st, the keys a", NamedTextColor.DARK_RED))
				.append(Component.text("re", NamedTextColor.DARK_RED, TextDecoration.OBFUSCATED))
				.append(Component.text("... Th", NamedTextColor.DARK_RED))
				.append(Component.text("e Nigh", NamedTextColor.DARK_RED, TextDecoration.OBFUSCATED))
				.append(Component.text("tmare... is h", NamedTextColor.DARK_RED))
				.append(Component.text("e", NamedTextColor.DARK_RED, TextDecoration.OBFUSCATED))
				.append(Component.text("re... I can ", NamedTextColor.DARK_RED))
				.append(Component.text("be ", NamedTextColor.DARK_RED, TextDecoration.OBFUSCATED))
				.append(Component.text("free...", NamedTextColor.DARK_RED)))
		);

		events.put(67, (mBoss) -> {
			PlayerUtils.nearbyPlayersAudience(mSpawnLoc, detectionRange)
				.sendMessage(Component.text("She can see us so clearly. So many eyes watching... We are " +
					"nothing but a show for them...", NamedTextColor.DARK_RED));
			phaseTransition(12, 1, phaseChangeActive, activeSpells2, passiveSpells);
		});

		events.put(33, (mBoss) -> {
			PlayerUtils.nearbyPlayersAudience(mSpawnLoc, detectionRange)
				.sendMessage(Component.text("Let this dance continue and it will take notice of you for r", NamedTextColor.DARK_RED)
					.append(Component.text("ea", NamedTextColor.DARK_RED, TextDecoration.OBFUSCATED))
					.append(Component.text("l. Do you really wi", NamedTextColor.DARK_RED))
					.append(Component.text("s", NamedTextColor.DARK_RED, TextDecoration.OBFUSCATED))
					.append(Component.text("h to do t", NamedTextColor.DARK_RED))
					.append(Component.text("h", NamedTextColor.DARK_RED, TextDecoration.OBFUSCATED))
					.append(Component.text("is?", NamedTextColor.DARK_RED)));
			phaseTransition(16, 1, phaseChangeActive, activeSpells3, passiveSpells);
		});

		events.put(15, (mBoss) -> {
			PlayerUtils.nearbyPlayersAudience(mSpawnLoc, detectionRange)
				.sendMessage(Component.text("H", JADE_COLOR)
					.append(Component.text("OW RESPLEN", JADE_COLOR, TextDecoration.OBFUSCATED))
					.append(Component.text("DENT... THE O", JADE_COLOR))
					.append(Component.text("RIG", JADE_COLOR, TextDecoration.OBFUSCATED))
					.append(Component.text("IN O", JADE_COLOR))
					.append(Component.text("F T", JADE_COLOR, TextDecoration.OBFUSCATED))
					.append(Component.text("H", JADE_COLOR))
					.append(Component.text("E ", JADE_COLOR, TextDecoration.OBFUSCATED))
					.append(Component.text("T", JADE_COLOR))
					.append(Component.text("APE", JADE_COLOR, TextDecoration.OBFUSCATED))
					.append(Component.text("STRY HAS EN", JADE_COLOR))
					.append(Component.text("DOWED US WITH THEIR COUN", JADE_COLOR, TextDecoration.OBFUSCATED))
					.append(Component.text("TENANCE. AH", JADE_COLOR))
					.append(Component.text("HHH... ", JADE_COLOR, TextDecoration.OBFUSCATED))
					.append(Component.text("THI", JADE_COLOR))
					.append(Component.text("S D", JADE_COLOR, TextDecoration.OBFUSCATED))
					.append(Component.text("AN", JADE_COLOR))
					.append(Component.text("CE ", JADE_COLOR, TextDecoration.OBFUSCATED))
					.append(Component.text("SHALL BE", JADE_COLOR))
					.append(Component.text("EXE", JADE_COLOR, TextDecoration.OBFUSCATED))
					.append(Component.text("MPL", JADE_COLOR))
					.append(Component.text("AR", JADE_COLOR, TextDecoration.OBFUSCATED))
					.append(Component.text("Y.", JADE_COLOR)));
			phaseTransition(20, 1.5, phaseChangeActive, activeSpells3, passiveSpells);
		});

		final BossBarManager bossBar = new BossBarManager(mBoss, detectionRange, BossBar.Color.RED, BossBar.Overlay.NOTCHED_10, events);
		super.constructBoss(activeSpells1, passiveSpells, detectionRange, bossBar);

		new BukkitRunnable() {
			@Override
			public void run() {
				if (mBoss.isDead() || !mBoss.isValid()) {
					this.cancel();
				}

				mCoefficient = BossUtils.healthScalingCoef(PlayerUtils.playersInRange(mBoss.getLocation(), detectionRange,
					true).size(), 0.5, 0.5);
			}
		}.runTaskTimer(mPlugin, TICKS_PER_SECOND * 5, TICKS_PER_SECOND * 5);
	}

	private void phaseTransition(final int radius, final double initKBSpeed, final SpellManager phaseChangeActive,
								 final SpellManager activeSpells, final List<Spell> passiveSpells) {
		final String SLOWNESS_SRC = "EXCAxtalKnockAwaySlowness";

		changePhase(SpellManager.EMPTY, Collections.emptyList(), null);
		final World world = mBoss.getWorld();
		final Location bossLoc = mBoss.getLocation();
		world.playSound(mBoss.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, SoundCategory.HOSTILE, 2.0f, 1.0f);
		world.playSound(mBoss.getLocation(), Sound.ENTITY_ENDER_DRAGON_GROWL, SoundCategory.HOSTILE, 2.0f, 0f);

		// knockaway
		for (final Player player : PlayerUtils.playersInRange(mBoss.getLocation(), radius, true)) {
			final double distance = player.getLocation().distance(bossLoc);
			final double speed = initKBSpeed * (1 - distance / radius);
			MovementUtils.knockAway(mBoss.getLocation(), player, (float) speed, false);
			com.playmonumenta.plugins.Plugin.getInstance().mEffectManager.addEffect(player, SLOWNESS_SRC,
				new PercentSpeed(TICKS_PER_SECOND * 50, -0.3, SLOWNESS_SRC));
		}

		// replace blocks -> teleport to random player
		setBlocksCircle(bossLoc, radius, Material.MAGMA_BLOCK);
		new BukkitRunnable() {
			int mInc = 0;
			@Override public void run() {
				world.playSound(bossLoc, Sound.ITEM_FIRECHARGE_USE, SoundCategory.HOSTILE, 1f, 0.7f);
				for (final Player p : PlayerUtils.playersInRange(bossLoc, radius, true)) {
					p.playSound(p.getLocation(), Sound.ENTITY_PLAYER_HURT_ON_FIRE, SoundCategory.HOSTILE, 0.8f, 0.8f);
					// should not die to phase change (1% max hp)
					BossUtils.bossDamagePercent(mBoss, p, 0.01, "Burning Ground");
				}
				if (mInc == 4) {
					world.playSound(bossLoc, Sound.BLOCK_LAVA_AMBIENT, SoundCategory.HOSTILE, 1.5f, 0.8f);
					setBlocksCircle(bossLoc, radius, Material.LAVA);
					changePhase(phaseChangeActive, Collections.emptyList(), null);
					forceCastSpell(SpellTpBehindPlayer.class);
				}
				if (mInc == 8) {
					changePhase(activeSpells, passiveSpells, null);
					this.cancel();
				}
				if (mBoss.isDead() || !mBoss.isValid()) {
					this.cancel();
				}
				mInc++;
			}
		}.runTaskTimer(mPlugin, TICKS_PER_SECOND, TICKS_PER_SECOND);
	}

	private void setBlocksCircle(final Location bossLoc, final int radius, final Material mat) {
		new BukkitRunnable() {
			double mRadius = 0.0;
			@Override public void run() {
				final List<Block> blocks = new ArrayList<>();
				// take max for preventing div by 0
				// max radius = 32, 360 / (32 * 8)) > 1
				// min radius = 1, 360 / 8 < 360
				final double inc = Math.min(360.0 / (Math.max(mRadius, 1) * 8.0), 360);
				//get valid blocks in circle
				for (double degrees = 0; degrees <= 360; degrees += inc) {
					// ignore 33% of blocks
					final double rng = FastUtils.randomDoubleInRange(0, 1);
					if (rng <= 0.33) {
						continue;
					}
					// block under boss
					if (mRadius < 1) {
						final Block block = getBlock(bossLoc.clone());
						if (block.isSolid()) {
							blocks.add(block);
						}
						break;
					}

					//remaining blocks
					final Location bLoc = bossLoc.clone().add(FastUtils.cosDeg(degrees) * mRadius, 0, FastUtils.sinDeg(degrees) * mRadius);
					Block block = getBlock(bLoc);
					if (block.isSolid()) {
						// do not replace unbreakable blocks, shift up by 1
						if (BlockUtils.isMechanicalBlock(block.getType()) || BlockUtils.isNonEmptyContainer(block)) {
							block = block.getLocation().add(0, 1, 0).getBlock();
						}
						blocks.add(block);
					}
				}
				// set valid blocks in list
				for (final Block b : blocks) {
					b.setType(mat);
				}
				if (mRadius >= radius || mBoss.isDead() || !mBoss.isValid()) {
					this.cancel();
				}
				mRadius++;
			}
		}.runTaskTimer(mPlugin, 0, 1);
	}

	//only top most block is replaced
	private Block getBlock(final Location loc) {
		Block block = loc.getBlock(); // this is usually air or passable block, catch from previous function.
		for (int y = 10; y >= -5; y--) {
			block = loc.clone().add(0, y, 0).getBlock();
			if (block.isSolid()) {
				break;
			}
		}
		return block;
	}

	@Override
	public void onHurt(final DamageEvent event) {
		event.setFlatDamage(event.getFlatDamage() / mCoefficient);
	}

	@Override
	public void init() {
		final int hpDelta = 5000;
		final List<Player> players = PlayerUtils.playersInRange(mBoss.getLocation(), detectionRange, true);
		mCoefficient = BossUtils.healthScalingCoef(players.size(), 0.5, 0.5);
		EntityUtils.setAttributeBase(mBoss, Attribute.GENERIC_MAX_HEALTH, hpDelta);
		mBoss.setHealth(hpDelta);

		//launch event related spawn commands
		for (final Player player : players) {
			MessagingUtils.sendTitle(player, Component.text("C'Axtal", NamedTextColor.DARK_RED, TextDecoration.BOLD),
				Component.text("The Soulspeaker", NamedTextColor.RED, TextDecoration.BOLD));
			player.playSound(player.getLocation(), Sound.ENTITY_WITHER_SPAWN, SoundCategory.HOSTILE, 5, 0.7f);
			player.addPotionEffect(new PotionEffect(PotionEffectType.BLINDNESS, TICKS_PER_SECOND * 2,
				2, true, false, false));
		}
	}

	@Override
	public void death(@Nullable final EntityDeathEvent event) {
		final List<Player> players = PlayerUtils.playersInRange(mBoss.getLocation(), detectionRange, true);

		BossUtils.endBossFightEffects(players);

		for (final Player player : players) {
			player.playSound(player.getLocation(), Sound.ENTITY_ENDER_DRAGON_DEATH, SoundCategory.HOSTILE, 5.0f, 0.8f);
			player.sendMessage(Component.text("She can't protect you forever, hero... Be warned...", NamedTextColor.DARK_RED));
		}
		mEndLoc.getBlock().setType(Material.REDSTONE_BLOCK);
	}
}
