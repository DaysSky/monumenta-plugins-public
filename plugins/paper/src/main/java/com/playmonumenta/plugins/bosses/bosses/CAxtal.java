package com.playmonumenta.plugins.bosses.bosses;

import com.playmonumenta.plugins.bosses.BossBarManager;
import com.playmonumenta.plugins.bosses.BossBarManager.BossHealthAction;
import com.playmonumenta.plugins.bosses.SpellManager;
import com.playmonumenta.plugins.bosses.spells.Spell;
import com.playmonumenta.plugins.bosses.spells.SpellAxtalMeleeMinions;
import com.playmonumenta.plugins.bosses.spells.SpellAxtalTntThrow;
import com.playmonumenta.plugins.bosses.spells.SpellAxtalWitherAoe;
import com.playmonumenta.plugins.bosses.spells.SpellBaseLaser;
import com.playmonumenta.plugins.bosses.spells.SpellBlockBreak;
import com.playmonumenta.plugins.bosses.spells.SpellConditionalTeleport;
import com.playmonumenta.plugins.bosses.spells.SpellTpBehindPlayer;
import com.playmonumenta.plugins.effects.PercentDamageReceived;
import com.playmonumenta.plugins.events.DamageEvent;
import com.playmonumenta.plugins.particle.PartialParticle;
import com.playmonumenta.plugins.utils.BossUtils;
import com.playmonumenta.plugins.utils.DamageUtils;
import com.playmonumenta.plugins.utils.EntityUtils;
import com.playmonumenta.plugins.utils.LocationUtils;
import com.playmonumenta.plugins.utils.MessagingUtils;
import com.playmonumenta.plugins.utils.PlayerUtils;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import net.kyori.adventure.bossbar.BossBar;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.Particle;
import org.bukkit.Sound;
import org.bukkit.SoundCategory;
import org.bukkit.World;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.entity.EntityDeathEvent;
import org.bukkit.plugin.Plugin;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.scheduler.BukkitRunnable;
import org.jetbrains.annotations.Nullable;

import static com.playmonumenta.plugins.Constants.TICKS_PER_SECOND;

public final class CAxtal extends SerializedLocationBossAbilityGroup {
	public static final String identityTag = "boss_caxtal";
	public static final int detectionRange = 110;

	private double mCoefficient = 1.0;

	public CAxtal(final Plugin plugin, final LivingEntity boss, final Location spawnLoc, final Location endLoc) {
		super(plugin, identityTag, boss, spawnLoc, endLoc);
		mBoss.setRemoveWhenFarAway(false);
		mBoss.addScoreboardTag("Boss");

		final SpellManager activeSpells = new SpellManager(Arrays.asList(
			new SpellAxtalWitherAoe(mPlugin, mBoss, 13, 0, 30),
			new SpellAxtalMeleeMinions(mPlugin, mBoss, 10, 3, 3, 20, 12, "Soul", false),
			new SpellTpBehindPlayer(mPlugin, mBoss, TICKS_PER_SECOND * 8, 80, (int) (TICKS_PER_SECOND * 2.5), 10, true),
			new SpellAxtalTntThrow(mPlugin, mBoss, 5, (int) (TICKS_PER_SECOND * 0.75)),
			new SpellBaseLaser(mPlugin, mBoss, 60, TICKS_PER_SECOND * 7, false, true,
				TICKS_PER_SECOND * 8,
				// Tick action per player
				(final LivingEntity target, final int ticks, final boolean blocked) -> {
					final World world = mBoss.getWorld();
					if (ticks % 8 == 0) {
						world.playSound(target.getLocation(), Sound.UI_TOAST_IN, SoundCategory.HOSTILE, 2, 0.5f + (ticks / 100f) * 1.5f);
					} else if (ticks % 8 == 2) {
						world.playSound(mBoss.getLocation(), Sound.UI_TOAST_IN, SoundCategory.HOSTILE, 2, 0.5f + (ticks / 100f) * 1.5f);
					} else if (ticks % 8 == 4) {
						world.playSound(target.getLocation(), Sound.ENTITY_WITHER_SPAWN, SoundCategory.HOSTILE, 2, 0.5f + (ticks / 100f) * 1.5f);
					} else if (ticks % 8 == 6) {
						world.playSound(mBoss.getLocation(), Sound.UI_TOAST_IN, SoundCategory.HOSTILE, 2, 0.5f + (ticks / 100f) * 1.5f);
					}
				},
				// Particles generated by the laser
				(final Location loc) -> {
					new PartialParticle(Particle.SMOKE_NORMAL, loc).count(1).delta(0.02).extra(0).spawnAsEntityActive(mBoss);
					new PartialParticle(Particle.SMOKE_LARGE, loc).count(1).delta(0.02).extra(0).spawnAsEntityActive(mBoss);
					new PartialParticle(Particle.SPELL_MOB, loc).count(1).delta(0.02).extra(1).spawnAsEntityActive(mBoss);
				},
				// TNT generated at the end of the attack
				(final LivingEntity player, final Location loc, final boolean blocked) -> {
					final double r = 15;
					final int maxDmg = 60;
					for (final Player p : PlayerUtils.playersInRange(loc, r, true)) {
						if (p.getLocation().distance(loc) <= r && (LocationUtils.hasLineOfSight(p.getLocation(), loc)
							|| LocationUtils.hasLineOfSight(p.getEyeLocation(), loc))) {
							final double dist = p.getLocation().distance(loc);
							DamageUtils.damage(mBoss, p, DamageEvent.DamageType.MAGIC, maxDmg * (1 - dist / r),
								null, false, true, "Corruption Blast");
							com.playmonumenta.plugins.Plugin.getInstance().mEffectManager.addEffect(p, PercentDamageReceived.effectID,
								new PercentDamageReceived(2, -1.0));
						}
					}
					loc.getWorld().createExplosion(loc, 7, false, true, mBoss);
				})
		));

		final List<Spell> passiveSpells = Arrays.asList(
			new SpellBlockBreak(mBoss),
			// Teleport the boss to mSpawnLoc if he is too far away, is stuck in bedrock, or is in lava
			new SpellConditionalTeleport(mBoss, mSpawnLoc,
				b -> mSpawnLoc.distanceSquared(b.getLocation()) > detectionRange * detectionRange
				|| b.getLocation().getBlock().getType() == Material.BEDROCK
				|| b.getLocation().add(0, 1, 0).getBlock().getType() == Material.BEDROCK
				|| b.getLocation().getBlock().getType() == Material.LAVA)
		);

		final Map<Integer, BossHealthAction> events = new HashMap<>();
		events.put(100, mBoss -> PlayerUtils.nearbyPlayersAudience(mSpawnLoc, detectionRange)
			.sendMessage(Component.text("At last, the keys are collected. I can be free finally...", NamedTextColor.DARK_RED)));
		events.put(50, (mBoss) -> PlayerUtils.nearbyPlayersAudience(mSpawnLoc, detectionRange)
			.sendMessage(Component.text("PLEASE. KILL ME. KAUL HOLDS ONTO MY MIND, BUT I YEARN FOR FREEDOM.", NamedTextColor.DARK_RED)));
		events.put(25, (mBoss) -> PlayerUtils.nearbyPlayersAudience(mSpawnLoc, detectionRange)
			.sendMessage(Component.text("YOU ARE CLOSE. END THIS. END THE REVERIE!", NamedTextColor.DARK_RED)));
		events.put(10, (mBoss) -> PlayerUtils.nearbyPlayersAudience(mSpawnLoc, detectionRange)
			.sendMessage(Component.text("My servant is nearly dead. You dare to impose your will on the jungle?", NamedTextColor.DARK_GREEN)));

		final BossBarManager bossBar = new BossBarManager(mBoss, detectionRange, BossBar.Color.RED, BossBar.Overlay.NOTCHED_10, events);
		super.constructBoss(activeSpells, passiveSpells, detectionRange, bossBar);

		new BukkitRunnable() {
			@Override
			public void run() {
				if (mBoss.isDead() || !mBoss.isValid()) {
					this.cancel();
				}
				mCoefficient = BossUtils.healthScalingCoef(PlayerUtils.playersInRange(mBoss.getLocation(), detectionRange,
					true).size(), 0.5, 0.5);
			}
		}.runTaskTimer(mPlugin, TICKS_PER_SECOND * 5, TICKS_PER_SECOND * 5);
	}

	@Override
	public void onHurt(final DamageEvent event) {
		event.setFlatDamage(event.getFlatDamage() / mCoefficient);
	}

	@Override
	public void init() {
		final List<Player> players = PlayerUtils.playersInRange(mBoss.getLocation(), detectionRange, true);
		final int baseHealth = 1024;
		mCoefficient = BossUtils.healthScalingCoef(players.size(), 0.5, 0.5);
		EntityUtils.setMaxHealthAndHealth(mBoss, baseHealth);

		//launch event related spawn commands
		for (final Player player : players) {
			MessagingUtils.sendBoldTitle(player, Component.text("C'Axtal", NamedTextColor.DARK_RED),
				Component.text("The Soulspeaker", NamedTextColor.RED));
			player.playSound(player.getLocation(), Sound.ENTITY_WITHER_SPAWN, SoundCategory.HOSTILE, 5, 0.7f);
			player.addPotionEffect(new PotionEffect(PotionEffectType.BLINDNESS, TICKS_PER_SECOND * 2,
				2, true, false, false));
		}
	}

	@Override
	public void death(@Nullable final EntityDeathEvent event) {
		final List<Player> players = PlayerUtils.playersInRange(mBoss.getLocation(), detectionRange, true);

		BossUtils.endBossFightEffects(players);
		for (final Player player : players) {
			player.playSound(player.getLocation(), Sound.ENTITY_ENDER_DRAGON_DEATH, SoundCategory.HOSTILE, 5, 0.8f);
			player.sendMessage(Component.text("It ends at last... Is this what freedom feels like?..", NamedTextColor.DARK_RED));
		}
		mEndLoc.getBlock().setType(Material.REDSTONE_BLOCK);
	}
}
