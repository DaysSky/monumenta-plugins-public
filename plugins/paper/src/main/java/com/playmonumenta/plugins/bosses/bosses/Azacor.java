package com.playmonumenta.plugins.bosses.bosses;

import com.playmonumenta.plugins.Constants;
import com.playmonumenta.plugins.bosses.BossBarManager;
import com.playmonumenta.plugins.bosses.BossBarManager.BossHealthAction;
import com.playmonumenta.plugins.bosses.SpellManager;
import com.playmonumenta.plugins.bosses.spells.Spell;
import com.playmonumenta.plugins.bosses.spells.SpellBaseLaser;
import com.playmonumenta.plugins.bosses.spells.SpellBlockBreak;
import com.playmonumenta.plugins.bosses.spells.SpellChangeFloor;
import com.playmonumenta.plugins.bosses.spells.SpellConditionalTeleport;
import com.playmonumenta.plugins.bosses.spells.SpellFireball;
import com.playmonumenta.plugins.bosses.spells.SpellKnockAway;
import com.playmonumenta.plugins.bosses.spells.SpellMinionResist;
import com.playmonumenta.plugins.effects.PercentSpeed;
import com.playmonumenta.plugins.integrations.LibraryOfSoulsIntegration;
import com.playmonumenta.plugins.particle.PartialParticle;
import com.playmonumenta.plugins.utils.BossUtils;
import com.playmonumenta.plugins.utils.EntityUtils;
import com.playmonumenta.plugins.utils.FastUtils;
import com.playmonumenta.plugins.utils.MessagingUtils;
import com.playmonumenta.plugins.utils.PlayerUtils;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import net.kyori.adventure.bossbar.BossBar;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.Particle;
import org.bukkit.Sound;
import org.bukkit.SoundCategory;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.entity.TNTPrimed;
import org.bukkit.event.entity.EntityDeathEvent;
import org.bukkit.plugin.Plugin;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.jetbrains.annotations.Nullable;

public final class Azacor extends SerializedLocationBossAbilityGroup {
	public static final String identityTag = "boss_azacor";
	public static final int detectionRange = 50;
	public static final String LASER_SLOWNESS_SRC = "AzacorLaserSlowness";

	private int mPlayerCount = 1;

	public Azacor(Plugin plugin, LivingEntity boss, Location spawnLoc, Location endLoc) {
		super(plugin, identityTag, boss, spawnLoc, endLoc);

		mBoss.setRemoveWhenFarAway(false);
		mBoss.addScoreboardTag("Boss");

		final SpellManager activeSpells = new SpellManager(Arrays.asList(
			new SpellChangeFloor(mPlugin, mBoss, mSpawnLoc, 24, 3, Material.LAVA, Constants.TICKS_PER_SECOND * 20),
			new SpellFireball(mPlugin, mBoss, detectionRange, Constants.TICKS_PER_SECOND * 2, 1,
				Constants.TICKS_PER_SECOND * 8, 2.0f, true, false,
				// Launch effect
				(Location loc) -> {
					loc.getWorld().playSound(loc, Sound.ENTITY_GHAST_SHOOT, SoundCategory.HOSTILE, 1.0f, 1.0f);
					new PartialParticle(Particle.VILLAGER_ANGRY, loc).count(10).delta(0.4).extra(0).spawnAsEntityActive(mBoss);
				}),
			new SpellBaseLaser(mPlugin, mBoss, detectionRange, Constants.TICKS_PER_SECOND * 5,
				false, false, Constants.TICKS_PER_SECOND * 8,
				// Tick action per player
				(LivingEntity target, int ticks, boolean blocked) -> {
					if (ticks % 8 == 0) {
						target.getWorld().playSound(target.getLocation(), Sound.UI_TOAST_IN, SoundCategory.HOSTILE, 0.75f, 0.5f + (ticks / 80f) * 1.5f);
					} else if (ticks % 8 == 2) {
						boss.getLocation().getWorld().playSound(mBoss.getLocation(), Sound.UI_TOAST_IN, SoundCategory.HOSTILE, 1.0f, 0.5f + (ticks / 80f) * 1.5f);
					} else if (ticks % 8 == 4) {
						target.getWorld().playSound(target.getLocation(), Sound.ENTITY_WITHER_SPAWN, SoundCategory.HOSTILE, 0.75f, 0.5f + (ticks / 100f) * 1.5f);
					} else if (ticks % 8 == 6) {
						boss.getLocation().getWorld().playSound(mBoss.getLocation(), Sound.UI_TOAST_IN, SoundCategory.HOSTILE, 1.0f, 0.5f + (ticks / 100f) * 1.5f);
					}
					if (ticks == 0) {
						com.playmonumenta.plugins.Plugin.getInstance().mEffectManager.addEffect(mBoss, LASER_SLOWNESS_SRC,
							new PercentSpeed((int) (Constants.TICKS_PER_SECOND * 5.5), -0.75, LASER_SLOWNESS_SRC));
					}
				},
				// Particles generated by the laser
				(Location loc) -> {
					new PartialParticle(Particle.SMOKE_LARGE, loc).count(1).delta(0.02).extra(0).spawnAsEntityActive(mBoss);
					new PartialParticle(Particle.FLAME, loc).count(1).delta(0.02).extra(0).spawnAsEntityActive(mBoss);
				},
				// Damage generated at the end of the attack
				(LivingEntity target, Location loc, boolean blocked) -> {
					loc.getWorld().playSound(loc, Sound.ENTITY_DRAGON_FIREBALL_EXPLODE, SoundCategory.HOSTILE, 1f, 1.5f);
					new PartialParticle(Particle.EXPLOSION_LARGE, loc).count(30).minimumCount(1).delta(0).extra(0.3).spawnAsEntityActive(mBoss);
					if (!blocked) {
						BossUtils.bossDamagePercent(mBoss, target, 0.75, mBoss.getLocation());
						if (target instanceof Player player && BossUtils.bossDamageBlocked(player, mBoss.getLocation())) {
							BossUtils.bossDamagePercent(mBoss, target, 0.25);
						}
						target.addPotionEffect(new PotionEffect(PotionEffectType.WITHER, Constants.TICKS_PER_SECOND * 5, 2));
					} else {
						loc.getWorld().spawn(loc, TNTPrimed.class, e -> e.setFuseTicks(0));
					}
				}),
			new SpellKnockAway(mPlugin, mBoss, 5, Constants.TICKS_PER_SECOND, 1.5f)
		));

		final List<Spell> passiveSpells = Arrays.asList(
			new SpellBlockBreak(mBoss),
			// Teleport the boss to mSpawnLoc if he is too far away, in bedrock, or in lava
			new SpellConditionalTeleport(mBoss, mSpawnLoc, b ->
				mSpawnLoc.distanceSquared(b.getLocation()) > detectionRange * detectionRange
				|| b.getLocation().getBlock().getType() == Material.BEDROCK
				|| b.getLocation().add(0, 1, 0).getBlock().getType() == Material.BEDROCK
				|| b.getLocation().getBlock().getType() == Material.LAVA),
			new SpellMinionResist(mBoss, new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 30, 2),
				detectionRange, 5, (entity) -> (entity.getType().equals(EntityType.WITHER_SKELETON)
				|| entity.getType().equals(EntityType.SKELETON)) && entity.getScoreboardTags().contains("azacor_minion"))
		);

		final Map<Integer, BossHealthAction> events = new HashMap<>();
		events.put(100, (mBoss) -> {
			sendMessage("I took his offer and I remain here. Even assassins cannot make me face death! What " +
				"makes you think you can fare better?");
			spawnMinions();
		});

		events.put(75, (mBoss) -> {
			sendMessage("I will bask in their screams!");
			spawnMinions();
		});

		events.put(50, (mBoss) -> {
			sendMessage("Foolish mortals! Your efforts mean nothing. You cannot stop me. You will fall, just " +
				"like the rest.");
			spawnMinions();
		});

		events.put(25, (mBoss) -> {
			sendMessage("I wield powers beyond your comprehension. I will not be defeated by insects like you!");
			spawnMinions();
		});

		final BossBarManager bossBar = new BossBarManager(boss, detectionRange, BossBar.Color.RED, BossBar.Overlay.NOTCHED_10, events);
		super.constructBoss(activeSpells, passiveSpells, detectionRange, bossBar);
	}

	@Override
	public void init() {
		final List<Player> players = PlayerUtils.playersInRange(mBoss.getLocation(), detectionRange, true);
		mPlayerCount = players.size();
		final int hpDelta = 1250;
		final double finalHp = hpDelta * BossUtils.healthScalingCoef(mPlayerCount, 0.6, 0.35);
		EntityUtils.setMaxHealthAndHealth(mBoss, finalHp);

		for (Player player : players) {
			MessagingUtils.sendBoldTitle(player, Component.text("Azacor", NamedTextColor.DARK_GRAY),
				Component.text("The Dark Summoner", NamedTextColor.GRAY));
			player.addPotionEffect(new PotionEffect(PotionEffectType.BLINDNESS, Constants.TICKS_PER_SECOND * 2,
				0, false, true, true));
			player.playSound(player.getLocation(), Sound.ENTITY_WITHER_SPAWN, SoundCategory.HOSTILE, 5, 0.7f);
		}
	}

	@Override
	public void death(@Nullable EntityDeathEvent event) {
		final List<Player> players = PlayerUtils.playersInRange(mSpawnLoc, detectionRange, true);

		BossUtils.endBossFightEffects(players);
		for (Player player : players) {
			player.playSound(player.getLocation(), Sound.ENTITY_ENDER_DRAGON_DEATH, SoundCategory.HOSTILE, 5, 0.8f);
			player.sendMessage(Component.text("No... it's not possible... I was promised...", NamedTextColor.DARK_RED));
		}
		mEndLoc.getBlock().setType(Material.REDSTONE_BLOCK);
	}

	private void spawnMinions() {
		randomMinion(mSpawnLoc.clone().add(FastUtils.randomDoubleInRange(-3, 3), 0, FastUtils.randomDoubleInRange(-3, 3)),
			(100.0 + mPlayerCount * 75.0) * 1.1);
		if (mPlayerCount > 2) {
			randomMinion(mSpawnLoc.clone().add(FastUtils.randomDoubleInRange(-3, 3), 0, FastUtils.randomDoubleInRange(-3, 3)),
				(100.0 + mPlayerCount * 75.0) * 1.1);
		}
	}

	private void randomMinion(final Location loc, final double eliteHealth) {
		switch (FastUtils.RANDOM.nextInt(4)) {
			case 0 -> {
				LivingEntity elite = Objects.requireNonNull((LivingEntity) LibraryOfSoulsIntegration.summon(loc, "SarintultheUnseen"));
				EntityUtils.setMaxHealthAndHealth(elite, eliteHealth);
			}
			case 1 -> {
				LivingEntity elite = Objects.requireNonNull((LivingEntity) LibraryOfSoulsIntegration.summon(loc, "ZirinkelthePrecise"));
				EntityUtils.setMaxHealthAndHealth(elite, eliteHealth);
			}
			case 2 -> {
				LivingEntity elite = Objects.requireNonNull((LivingEntity) LibraryOfSoulsIntegration.summon(loc, "KazarthuntheMighty"));
				EntityUtils.setMaxHealthAndHealth(elite, 1.5 * eliteHealth);
			}
			default -> {
				LivingEntity elite = Objects.requireNonNull((LivingEntity) LibraryOfSoulsIntegration.summon(loc, "VerkantaltheCunning"));
				EntityUtils.setMaxHealthAndHealth(elite, 0.75 * eliteHealth);
			}
		}
	}

	private void sendMessage(final String msg) {
		PlayerUtils.nearbyPlayersAudience(mSpawnLoc, detectionRange).sendMessage(Component.text(msg, NamedTextColor.DARK_RED));
	}
}
